package io.simpleit.umbrella.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AppUserAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppUserAllPropertiesEquals(AppUser expected, AppUser actual) {
        assertAppUserAutoGeneratedPropertiesEquals(expected, actual);
        assertAppUserAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppUserAllUpdatablePropertiesEquals(AppUser expected, AppUser actual) {
        assertAppUserUpdatableFieldsEquals(expected, actual);
        assertAppUserUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppUserAutoGeneratedPropertiesEquals(AppUser expected, AppUser actual) {
        assertThat(expected)
            .as("Verify AppUser auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppUserUpdatableFieldsEquals(AppUser expected, AppUser actual) {
        assertThat(expected)
            .as("Verify AppUser relevant properties")
            .satisfies(e -> assertThat(e.getUsername()).as("check username").isEqualTo(actual.getUsername()))
            .satisfies(e -> assertThat(e.getPassword()).as("check password").isEqualTo(actual.getPassword()))
            .satisfies(e -> assertThat(e.getPhoto()).as("check photo").isEqualTo(actual.getPhoto()))
            .satisfies(e -> assertThat(e.getPhotoContentType()).as("check photo contenty type").isEqualTo(actual.getPhotoContentType()))
            .satisfies(e -> assertThat(e.getIsAdmin()).as("check isAdmin").isEqualTo(actual.getIsAdmin()))
            .satisfies(e -> assertThat(e.getCreationDate()).as("check creationDate").isEqualTo(actual.getCreationDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppUserUpdatableRelationshipsEquals(AppUser expected, AppUser actual) {
        assertThat(expected)
            .as("Verify AppUser relationships")
            .satisfies(e -> assertThat(e.getContact()).as("check contact").isEqualTo(actual.getContact()));
    }
}
