package io.simpleit.umbrella.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ActivityReportAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActivityReportAllPropertiesEquals(ActivityReport expected, ActivityReport actual) {
        assertActivityReportAutoGeneratedPropertiesEquals(expected, actual);
        assertActivityReportAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActivityReportAllUpdatablePropertiesEquals(ActivityReport expected, ActivityReport actual) {
        assertActivityReportUpdatableFieldsEquals(expected, actual);
        assertActivityReportUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActivityReportAutoGeneratedPropertiesEquals(ActivityReport expected, ActivityReport actual) {
        assertThat(expected)
            .as("Verify ActivityReport auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActivityReportUpdatableFieldsEquals(ActivityReport expected, ActivityReport actual) {
        assertThat(expected)
            .as("Verify ActivityReport relevant properties")
            .satisfies(e -> assertThat(e.getMonth()).as("check month").isEqualTo(actual.getMonth()))
            .satisfies(e -> assertThat(e.getBalance()).as("check balance").isEqualTo(actual.getBalance()))
            .satisfies(e -> assertThat(e.getComments()).as("check comments").isEqualTo(actual.getComments()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActivityReportUpdatableRelationshipsEquals(ActivityReport expected, ActivityReport actual) {
        assertThat(expected)
            .as("Verify ActivityReport relationships")
            .satisfies(e -> assertThat(e.getEmployee()).as("check employee").isEqualTo(actual.getEmployee()));
    }
}
