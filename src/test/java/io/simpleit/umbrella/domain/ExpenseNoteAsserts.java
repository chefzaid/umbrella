package io.simpleit.umbrella.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ExpenseNoteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseNoteAllPropertiesEquals(ExpenseNote expected, ExpenseNote actual) {
        assertExpenseNoteAutoGeneratedPropertiesEquals(expected, actual);
        assertExpenseNoteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseNoteAllUpdatablePropertiesEquals(ExpenseNote expected, ExpenseNote actual) {
        assertExpenseNoteUpdatableFieldsEquals(expected, actual);
        assertExpenseNoteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseNoteAutoGeneratedPropertiesEquals(ExpenseNote expected, ExpenseNote actual) {
        assertThat(expected)
            .as("Verify ExpenseNote auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseNoteUpdatableFieldsEquals(ExpenseNote expected, ExpenseNote actual) {
        assertThat(expected)
            .as("Verify ExpenseNote relevant properties")
            .satisfies(e -> assertThat(e.getLabel()).as("check label").isEqualTo(actual.getLabel()))
            .satisfies(e -> assertThat(e.getConcernedMonth()).as("check concernedMonth").isEqualTo(actual.getConcernedMonth()))
            .satisfies(e -> assertThat(e.getCreationDate()).as("check creationDate").isEqualTo(actual.getCreationDate()))
            .satisfies(e -> assertThat(e.getSubmitDate()).as("check submitDate").isEqualTo(actual.getSubmitDate()))
            .satisfies(e -> assertThat(e.getValidationDate()).as("check validationDate").isEqualTo(actual.getValidationDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseNoteUpdatableRelationshipsEquals(ExpenseNote expected, ExpenseNote actual) {
        assertThat(expected)
            .as("Verify ExpenseNote relationships")
            .satisfies(e -> assertThat(e.getMileageAllowance()).as("check mileageAllowance").isEqualTo(actual.getMileageAllowance()))
            .satisfies(e -> assertThat(e.getDocument()).as("check document").isEqualTo(actual.getDocument()))
            .satisfies(e -> assertThat(e.getEmployee()).as("check employee").isEqualTo(actual.getEmployee()));
    }
}
