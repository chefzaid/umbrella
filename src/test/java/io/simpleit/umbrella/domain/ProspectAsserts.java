package io.simpleit.umbrella.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProspectAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProspectAllPropertiesEquals(Prospect expected, Prospect actual) {
        assertProspectAutoGeneratedPropertiesEquals(expected, actual);
        assertProspectAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProspectAllUpdatablePropertiesEquals(Prospect expected, Prospect actual) {
        assertProspectUpdatableFieldsEquals(expected, actual);
        assertProspectUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProspectAutoGeneratedPropertiesEquals(Prospect expected, Prospect actual) {
        assertThat(expected)
            .as("Verify Prospect auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProspectUpdatableFieldsEquals(Prospect expected, Prospect actual) {
        assertThat(expected)
            .as("Verify Prospect relevant properties")
            .satisfies(e -> assertThat(e.getDailyRate()).as("check dailyRate").isEqualTo(actual.getDailyRate()))
            .satisfies(e -> assertThat(e.getMonthlyExpenses()).as("check monthlyExpenses").isEqualTo(actual.getMonthlyExpenses()))
            .satisfies(e -> assertThat(e.getTaxRate()).as("check taxRate").isEqualTo(actual.getTaxRate()))
            .satisfies(e -> assertThat(e.getExpectedStartDate()).as("check expectedStartDate").isEqualTo(actual.getExpectedStartDate()))
            .satisfies(e -> assertThat(e.getExpectedClient()).as("check expectedClient").isEqualTo(actual.getExpectedClient()))
            .satisfies(e -> assertThat(e.getNotes()).as("check notes").isEqualTo(actual.getNotes()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProspectUpdatableRelationshipsEquals(Prospect expected, Prospect actual) {
        assertThat(expected)
            .as("Verify Prospect relationships")
            .satisfies(e -> assertThat(e.getFormula()).as("check formula").isEqualTo(actual.getFormula()));
    }
}
