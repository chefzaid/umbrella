package io.simpleit.umbrella.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ServiceContractAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceContractAllPropertiesEquals(ServiceContract expected, ServiceContract actual) {
        assertServiceContractAutoGeneratedPropertiesEquals(expected, actual);
        assertServiceContractAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceContractAllUpdatablePropertiesEquals(ServiceContract expected, ServiceContract actual) {
        assertServiceContractUpdatableFieldsEquals(expected, actual);
        assertServiceContractUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceContractAutoGeneratedPropertiesEquals(ServiceContract expected, ServiceContract actual) {
        assertThat(expected)
            .as("Verify ServiceContract auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceContractUpdatableFieldsEquals(ServiceContract expected, ServiceContract actual) {
        assertThat(expected)
            .as("Verify ServiceContract relevant properties")
            .satisfies(e -> assertThat(e.getServiceLabel()).as("check serviceLabel").isEqualTo(actual.getServiceLabel()))
            .satisfies(e -> assertThat(e.getDailyRate()).as("check dailyRate").isEqualTo(actual.getDailyRate()))
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(e -> assertThat(e.getExtensionTerms()).as("check extensionTerms").isEqualTo(actual.getExtensionTerms()))
            .satisfies(e -> assertThat(e.getSignedBySupplier()).as("check signedBySupplier").isEqualTo(actual.getSignedBySupplier()))
            .satisfies(e -> assertThat(e.getSignedByClient()).as("check signedByClient").isEqualTo(actual.getSignedByClient()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceContractUpdatableRelationshipsEquals(ServiceContract expected, ServiceContract actual) {
        assertThat(expected)
            .as("Verify ServiceContract relationships")
            .satisfies(e -> assertThat(e.getEmployee()).as("check employee").isEqualTo(actual.getEmployee()))
            .satisfies(e -> assertThat(e.getServiceContract()).as("check serviceContract").isEqualTo(actual.getServiceContract()));
    }
}
