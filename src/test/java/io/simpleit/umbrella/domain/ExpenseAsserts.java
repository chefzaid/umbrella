package io.simpleit.umbrella.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ExpenseAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseAllPropertiesEquals(Expense expected, Expense actual) {
        assertExpenseAutoGeneratedPropertiesEquals(expected, actual);
        assertExpenseAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseAllUpdatablePropertiesEquals(Expense expected, Expense actual) {
        assertExpenseUpdatableFieldsEquals(expected, actual);
        assertExpenseUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseAutoGeneratedPropertiesEquals(Expense expected, Expense actual) {
        assertThat(expected)
            .as("Verify Expense auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseUpdatableFieldsEquals(Expense expected, Expense actual) {
        assertThat(expected)
            .as("Verify Expense relevant properties")
            .satisfies(e -> assertThat(e.getLabel()).as("check label").isEqualTo(actual.getLabel()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getCurrency()).as("check currency").isEqualTo(actual.getCurrency()))
            .satisfies(e -> assertThat(e.getTax()).as("check tax").isEqualTo(actual.getTax()))
            .satisfies(e -> assertThat(e.getExpenseDate()).as("check expenseDate").isEqualTo(actual.getExpenseDate()))
            .satisfies(e -> assertThat(e.getRebillableToClient()).as("check rebillableToClient").isEqualTo(actual.getRebillableToClient()))
            .satisfies(e -> assertThat(e.getComment()).as("check comment").isEqualTo(actual.getComment()))
            .satisfies(e -> assertThat(e.getSubmitDate()).as("check submitDate").isEqualTo(actual.getSubmitDate()))
            .satisfies(e -> assertThat(e.getValidationDate()).as("check validationDate").isEqualTo(actual.getValidationDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseUpdatableRelationshipsEquals(Expense expected, Expense actual) {
        assertThat(expected)
            .as("Verify Expense relationships")
            .satisfies(e -> assertThat(e.getPaymentMethod()).as("check paymentMethod").isEqualTo(actual.getPaymentMethod()))
            .satisfies(e -> assertThat(e.getProject()).as("check project").isEqualTo(actual.getProject()))
            .satisfies(e -> assertThat(e.getExpenseNote()).as("check expenseNote").isEqualTo(actual.getExpenseNote()));
    }
}
